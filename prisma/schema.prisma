generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model ConsumptionHistory {
  consumption_id   Int             @id @default(autoincrement())
  house            House           @relation(fields: [house_id], references: [house_id])
  house_id         Int
  user             User            @relation(fields: [user_id], references: [user_id])
  user_id          String
  payment          PaymentHistory? @relation(fields: [payment_id], references: [payment_id])
  payment_id       Int?
  routine          UserRoutine?    @relation(fields: [routine_id], references: [routine_id])
  routine_id       Int?
  task             UserTask?       @relation(fields: [task_id], references: [task_id])
  task_id          Int?
  task_routine     Int?
  consumption_date DateTime        @db.DateTime(0)
  consumption      Float           @db.Float
  type             Int

  @@index([house_id], map: "house_id_idx")
  @@index([payment_id], map: "payment_id_idx")
  @@index([routine_id], map: "routine_id_idx")
  @@index([task_id], map: "task_id_idx")
  @@index([user_id], map: "user_id_idx")
  @@map("consumption_history")
}

model House {
  house_id                    Int                  @id @default(autoincrement())
  house_name                  String               @db.VarChar(255)
  consumption_history_entries ConsumptionHistory[]
  users                       User[]
  PaymentHistory              PaymentHistory[]

  @@map("house")
}

model PaymentHistory {
  payment_id                  Int                  @id @default(autoincrement())
  date_payment                DateTime?            @db.Date
  value_payment               Float?               @db.Float
  house                       House                @relation(fields: [house_id], references: [house_id])
  house_id                    Int
  consumption_history_entries ConsumptionHistory[]
  UserPayment                 UserPayment[]

  @@index([house_id], map: "house_id_idx")
  @@map("payment_history")
}

model Account {
  id                 String    @id @default(cuid())
  user_id            String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [user_id], references: [user_id])

  @@unique([providerId, providerAccountId])
  @@index([user_id])
}

model Session {
  id           String   @id @default(cuid())
  user_id      String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  email      String
  house_id   Int
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
}

model User {
  user_id             String               @id @default(cuid())
  password_hash       String               @default("") @db.VarChar(255)
  first_name          String               @db.VarChar(255)
  last_name           String               @db.VarChar(255)
  username            String               @db.VarChar(255)
  email               String?              @unique
  emailVerified       DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  accounts            Account[]
  sessions            Session[]
  house               House                @relation(fields: [house_id], references: [house_id])
  house_id            Int
  ref_avatar          String?
  consumption_history ConsumptionHistory[]
  UserPayment         UserPayment[]
  UserRoutine         UserRoutine[]
  UserTask            UserTask[]

  @@index([house_id], map: "house_id_idx")
  @@map("user")
}

model UserPayment {
  payment             PaymentHistory @relation(fields: [payment_id], references: [payment_id])
  payment_id          Int
  user                User           @relation(fields: [user_id], references: [user_id])
  user_id             String
  payment_percentage  Float          @db.Float
  user_has_payment_id Int            @id @default(autoincrement())

  //@@id([payment_id, user_id])
  @@index([payment_id], map: "payment_id_idx")
  @@index([user_id], map: "user_id_idx")
  @@map("user_has_payment")
}

model UserRoutine {
  routine_id                  Int                  @id @default(autoincrement())
  user                        User                 @relation(fields: [user_id], references: [user_id])
  user_id                     String
  duration_routine            Int                  @db.Int()
  creation_routine            DateTime             @db.DateTime(0)
  task                        Int                  @db.Int()
  weekdays                    Json                 @db.Json()
  period_time                 Json                 @db.Json()
  consumption_history_entries ConsumptionHistory[]

  @@index([user_id], map: "user_id_idx")
  @@map("user_routine")
}

model UserTask {
  task_id                     Int                  @id @default(autoincrement())
  user                        User                 @relation(fields: [user_id], references: [user_id])
  user_id                     String
  start_time                  DateTime?            @db.DateTime(0)
  end_time                    DateTime?            @db.DateTime(0)
  duration                    Int?                 @db.Int()
  task                        Int                  @db.Int()
  consumption_history_entries ConsumptionHistory[]

  @@index([user_id], map: "user_id_idx")
  @@map("user_task")
}
